[{"title":"Intro","type":0,"sectionRef":"#","url":"docs/intro","content":"Intro API DocsExamples","keywords":""},{"title":"Classes","type":0,"sectionRef":"#","url":"api/Classes","content":"","keywords":""},{"title":"Properties","type":1,"pageTitle":"Classes","url":"api/Classes#properties","content":" "},{"title":"Attributes","type":1,"pageTitle":"Classes","url":"api/Classes#Attributes","content":"&lt;/&gt; Classes.Attributes: Attributes Symbol representing Roblox attributes.  "},{"title":"Events","type":1,"pageTitle":"Classes","url":"api/Classes#Events","content":"&lt;/&gt; Classes.Events: Events Symbol representing Roblox events.  "},{"title":"Methods","type":1,"pageTitle":"Classes","url":"api/Classes#Methods","content":"&lt;/&gt; Classes.Methods: Methods Symbol representing Roblox methods.  "},{"title":"Properties","type":1,"pageTitle":"Classes","url":"api/Classes#Properties","content":"&lt;/&gt; Classes.Properties: Properties Symbol representing Roblox properties. "},{"title":"Functions","type":1,"pageTitle":"Classes","url":"api/Classes#functions","content":" "},{"title":"isClass","type":1,"pageTitle":"Classes","url":"api/Classes#isClass","content":"&lt;/&gt; Classes.isClass(class: Class) → boolean Returns if the given input is a class created using this library.  "},{"title":"isObject","type":1,"pageTitle":"Classes","url":"api/Classes#isObject","content":"&lt;/&gt; Classes.isObject(object: Object) → boolean Returns if the given input is a object created using this library.  "},{"title":"__call","type":1,"pageTitle":"Classes","url":"api/Classes#__call","content":"&lt;/&gt; Classes:__call( className: string?-- The name of the class. ) → Class Symbol representing Roblox properties. "},{"title":"Class","type":0,"sectionRef":"#","url":"api/Class","content":"","keywords":""},{"title":"Functions","type":1,"pageTitle":"Class","url":"api/Class#functions","content":" "},{"title":"__call","type":1,"pageTitle":"Class","url":"api/Class#__call","content":"&lt;/&gt; Class:__call(...: any?) → Object Returns a new object from the class.  "},{"title":"Extend","type":1,"pageTitle":"Class","url":"api/Class#Extend","content":"&lt;/&gt; Class:Extend(class: Class) → Class Inherits methods from a superclass. Overwrites the current superclass if one is already set.  "},{"title":"GetExtendedClass","type":1,"pageTitle":"Class","url":"api/Class#GetExtendedClass","content":"&lt;/&gt; Class:GetExtendedClass() → Class? Returns the superclass set previously by Class:Extend(). "},{"title":"Examples","type":0,"sectionRef":"#","url":"docs/Examples","content":"","keywords":""},{"title":"Example 1","type":1,"pageTitle":"Examples","url":"docs/Examples#example-1","content":"local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;)local Class = require(ReplicatedStorage.Class) -- New class constructorlocal myClass = Class(&quot;className&quot;) function myClass:init(name) local part = Instance.new(&quot;Part&quot;) -- Wraps the object around a Instance self:WrapInstance(part) -- Returns a property of a wrapped Instance print(self:GetProperty(&quot;Name&quot;)) -- Sets a property of a wrapped Instance self:SetProperty(&quot;Name&quot;, name or &quot;&quot;) -- Sets an attribute of a wrapped Instance self:SetAttribute(&quot;test&quot;, 5) -- Returns an event of a wrapped Instance self:GetEvent(&quot;Touched&quot;):Connect(function() print(&quot;touched&quot;) end) -- Returns the wrapped Instance self:GetWrappedInstance().Parent = workspaceend function myClass:test() return 5end -- Class extensionlocal myExtendedClass = Class():Extend(myClass)-- Object constructorlocal myObject = myExtendedClass(&quot;testObject&quot;) -- Class checking with inheritanceprint(myObject:IsA(&quot;className&quot;)) --&gt; true -- Class checking without inheritanceprint(myObject:IsA(&quot;className&quot;, true)) --&gt; false print(myObject:test()) --&gt; 5-- Returns the value of an attribute of a wrapped Instanceprint(myObject:GetAttribute(&quot;test&quot;)) --&gt; 5 -- Calls a method of a wrapped InstancemyObject:GetMethod(&quot;Clone&quot;)() -- Typecheckingprint(Class.isClass(myClass)) --&gt; trueprint(Class.isClass(myExtendedClass)) --&gt; trueprint(Class.isClass(myObject)) --&gt; false print(Class.isObject(myClass)) --&gt; falseprint(Class.isObject(myExtendedClass)) --&gt; falseprint(Class.isObject(myObject)) --&gt; true Copy "},{"title":"Example 2","type":1,"pageTitle":"Examples","url":"docs/Examples#example-2","content":"local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;)local Class = require(ReplicatedStorage.Class) -- New class constructorlocal myClass = Class(&quot;className&quot;) function myClass:init(name) local part = Instance.new(&quot;Part&quot;) -- Wraps the object around a Instance self:WrapInstance(part, { [Class.Attributes] = { &quot;Name&quot; }, [Class.Events] = { &quot;Touched&quot; }, [Class.Methods] = { &quot;Clone&quot; }, [Class.Properties] = { &quot;Name&quot;}, })end Copy "},{"title":"Object","type":0,"sectionRef":"#","url":"api/Object","content":"","keywords":""},{"title":"Functions","type":1,"pageTitle":"Object","url":"api/Object#functions","content":" "},{"title":"GetAttribute","type":1,"pageTitle":"Object","url":"api/Object#GetAttribute","content":"&lt;/&gt; Object:GetAttribute(attributeName: string) → any Returns an attribute on the wrapped Instance.  "},{"title":"GetClass","type":1,"pageTitle":"Object","url":"api/Object#GetClass","content":"&lt;/&gt; Object:GetClass() → Class Returns the class this object was created from.  "},{"title":"GetEvent","type":1,"pageTitle":"Object","url":"api/Object#GetEvent","content":"&lt;/&gt; Object:GetEvent(eventName: string) → RBXScriptSignal Returns a event on the wrapped Instance.  "},{"title":"GetMethod","type":1,"pageTitle":"Object","url":"api/Object#GetMethod","content":"&lt;/&gt; Object:GetMethod(methodName: string) → function Returns a method on the wrapped Instance.  "},{"title":"GetProperty","type":1,"pageTitle":"Object","url":"api/Object#GetProperty","content":"&lt;/&gt; Object:GetProperty(propertyName: string) → any Returns a property on the wrapped Instance.  "},{"title":"GetWrappedInstance","type":1,"pageTitle":"Object","url":"api/Object#GetWrappedInstance","content":"&lt;/&gt; Object:GetWrappedInstance() → Instance Returns the wrapped Roblox Instance set previous byObject:WrapInstance().  "},{"title":"IsA","type":1,"pageTitle":"Object","url":"api/Object#IsA","content":"&lt;/&gt; Object:IsA( className: string, noRecursion: boolean-- If true, ignores superclasses. ) → boolean Behaves the same as Roblox's Instance:IsA() method.  "},{"title":"SetAttribute","type":1,"pageTitle":"Object","url":"api/Object#SetAttribute","content":"&lt;/&gt; Object:SetAttribute( attributeName: string, value: any ) → () Sets an attribute on the wrapped Instance.  "},{"title":"SetProperty","type":1,"pageTitle":"Object","url":"api/Object#SetProperty","content":"&lt;/&gt; Object:SetProperty(propertyName: string) → () Sets a property on the wrapped Instance.  "},{"title":"UnwrapAttribute","type":1,"pageTitle":"Object","url":"api/Object#UnwrapAttribute","content":"&lt;/&gt; Object:UnwrapAttribute(attributeName: string) → Object Unwraps a Roblox attribute.  "},{"title":"UnwrapEvent","type":1,"pageTitle":"Object","url":"api/Object#UnwrapEvent","content":"&lt;/&gt; Object:UnwrapEvent(eventName: string) → Object Unwraps a Roblox event.  "},{"title":"UnwrapInstance","type":1,"pageTitle":"Object","url":"api/Object#UnwrapInstance","content":"&lt;/&gt; Object:UnwrapInstance() → Object Unwraps a Roblox Instance.  "},{"title":"UnwrapMethod","type":1,"pageTitle":"Object","url":"api/Object#UnwrapMethod","content":"&lt;/&gt; Object:UnwrapMethod(methodName: string) → Object Unwraps a Roblox method.  "},{"title":"UnwrapProperty","type":1,"pageTitle":"Object","url":"api/Object#UnwrapProperty","content":"&lt;/&gt; Object:UnwrapProperty(propertyName: string) → Object Unwraps a Roblox property.  "},{"title":"WrapAttribute","type":1,"pageTitle":"Object","url":"api/Object#WrapAttribute","content":"&lt;/&gt; Object:WrapAttribute(attributeName: string) → Object Wraps a Roblox attribute.  "},{"title":"WrapEvent","type":1,"pageTitle":"Object","url":"api/Object#WrapEvent","content":"&lt;/&gt; Object:WrapEvent(eventName: string) → Object Wraps a Roblox event.  "},{"title":"WrapInstance","type":1,"pageTitle":"Object","url":"api/Object#WrapInstance","content":"&lt;/&gt; Object:WrapInstance( instance: Instance, wrapOptions: WrapOptions ) → Object Wraps a Roblox Instance. When an instance is wrapped any wrapped attributes, methods, properties, and events can be indexed as if they were the object's own properties. local myClass = Class(&quot;className&quot;) function myClass:init() local part = Instance.new(&quot;Part&quot;) self:WrapInstance(part, { [Class.Properties] = { &quot;Name&quot; } }) end print(myClass().Name) --&gt; Part   "},{"title":"WrapMethod","type":1,"pageTitle":"Object","url":"api/Object#WrapMethod","content":"&lt;/&gt; Object:WrapMethod(methodName: string) → Object Wraps a Roblox method.  "},{"title":"WrapProperty","type":1,"pageTitle":"Object","url":"api/Object#WrapProperty","content":"&lt;/&gt; Object:WrapProperty(propertyName: string) → Object Wraps a Roblox property. "}]